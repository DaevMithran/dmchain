// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multisig/v1/state.proto

package types

import (
	_ "cosmossdk.io/orm"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Types of multisig proposal permissions
type MultisigProposalType int32

const (
	// Allow ALL operations by default
	MultisigProposalType_MULTISIG_PROPOSAL_TYPE_UNSPECIFIED MultisigProposalType = 0
	// Allow only transfer operations
	MultisigProposalType_MULTISIG_PROPOSAL_TYPE_TRANSFER_ONLY MultisigProposalType = 1
	// Allow all operations other than transfers
	MultisigProposalType_MULTISIG_PROPOSAL_TYPE_EXCEPT_TRANSFER MultisigProposalType = 2
)

var MultisigProposalType_name = map[int32]string{
	0: "MULTISIG_PROPOSAL_TYPE_UNSPECIFIED",
	1: "MULTISIG_PROPOSAL_TYPE_TRANSFER_ONLY",
	2: "MULTISIG_PROPOSAL_TYPE_EXCEPT_TRANSFER",
}

var MultisigProposalType_value = map[string]int32{
	"MULTISIG_PROPOSAL_TYPE_UNSPECIFIED":     0,
	"MULTISIG_PROPOSAL_TYPE_TRANSFER_ONLY":   1,
	"MULTISIG_PROPOSAL_TYPE_EXCEPT_TRANSFER": 2,
}

func (x MultisigProposalType) String() string {
	return proto.EnumName(MultisigProposalType_name, int32(x))
}

func (MultisigProposalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a87be96daf13cd0b, []int{0}
}

// Details of a multisig account - using Collections approach
type MultisigAccountDetails struct {
	// List of signers for this multisig account
	Signers [][]byte `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	// The threshold of approvers required for the multisig account to be able to execute a call.
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Permission type for this multisig account
	Permission MultisigProposalType `protobuf:"varint,4,opt,name=permission,proto3,enum=multisig.v1.MultisigProposalType" json:"permission,omitempty"`
}

func (m *MultisigAccountDetails) Reset()         { *m = MultisigAccountDetails{} }
func (m *MultisigAccountDetails) String() string { return proto.CompactTextString(m) }
func (*MultisigAccountDetails) ProtoMessage()    {}
func (*MultisigAccountDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87be96daf13cd0b, []int{0}
}
func (m *MultisigAccountDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultisigAccountDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultisigAccountDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultisigAccountDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultisigAccountDetails.Merge(m, src)
}
func (m *MultisigAccountDetails) XXX_Size() int {
	return m.Size()
}
func (m *MultisigAccountDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MultisigAccountDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MultisigAccountDetails proto.InternalMessageInfo

func (m *MultisigAccountDetails) GetSigners() [][]byte {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *MultisigAccountDetails) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *MultisigAccountDetails) GetPermission() MultisigProposalType {
	if m != nil {
		return m.Permission
	}
	return MultisigProposalType_MULTISIG_PROPOSAL_TYPE_UNSPECIFIED
}

// An open multisig operation.
type Proposal struct {
	// Unique identifier for the proposal
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The multisig account address this proposal belongs to
	MultisigAddress []byte `protobuf:"bytes,2,opt,name=multisig_address,json=multisigAddress,proto3" json:"multisig_address,omitempty"`
	// The hash of the call to be executed
	CallHash []byte `protobuf:"bytes,3,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
	// The account who opened it (i.e. the first to approve it).
	Depositor []byte `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// The amount held in reserve of the `depositor`, to be returned once the operation ends.
	Deposit uint64 `protobuf:"varint,5,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// The approvals achieved so far, including the depositor.
	Approvals [][]byte `protobuf:"bytes,6,rep,name=approvals,proto3" json:"approvals,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87be96daf13cd0b, []int{1}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetMultisigAddress() []byte {
	if m != nil {
		return m.MultisigAddress
	}
	return nil
}

func (m *Proposal) GetCallHash() []byte {
	if m != nil {
		return m.CallHash
	}
	return nil
}

func (m *Proposal) GetDepositor() []byte {
	if m != nil {
		return m.Depositor
	}
	return nil
}

func (m *Proposal) GetDeposit() uint64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *Proposal) GetApprovals() [][]byte {
	if m != nil {
		return m.Approvals
	}
	return nil
}

func init() {
	proto.RegisterEnum("multisig.v1.MultisigProposalType", MultisigProposalType_name, MultisigProposalType_value)
	proto.RegisterType((*MultisigAccountDetails)(nil), "multisig.v1.MultisigAccountDetails")
	proto.RegisterType((*Proposal)(nil), "multisig.v1.Proposal")
}

func init() { proto.RegisterFile("multisig/v1/state.proto", fileDescriptor_a87be96daf13cd0b) }

var fileDescriptor_a87be96daf13cd0b = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x3b, 0xed, 0x5a, 0x77, 0xc7, 0xee, 0x1a, 0x06, 0x71, 0x87, 0x55, 0x42, 0x2c, 0xb2,
	0xc4, 0x45, 0x13, 0x56, 0xc1, 0x83, 0x9e, 0xe2, 0x36, 0xab, 0x85, 0xfe, 0x09, 0x69, 0x16, 0x5c,
	0x2f, 0x61, 0x36, 0x19, 0x9a, 0x81, 0xa4, 0x13, 0x66, 0xa6, 0xc5, 0xfd, 0x12, 0x22, 0xe8, 0xd9,
	0xcf, 0xe3, 0x71, 0xc1, 0x8b, 0x47, 0x69, 0xbf, 0x81, 0x57, 0x2f, 0x92, 0x74, 0xd3, 0x16, 0x71,
	0x8f, 0xef, 0x33, 0xcf, 0x3b, 0xef, 0xef, 0x7d, 0x79, 0xe0, 0x7e, 0x36, 0x4d, 0x15, 0x93, 0x6c,
	0x6c, 0xcf, 0x8e, 0x6d, 0xa9, 0x88, 0xa2, 0x56, 0x2e, 0xb8, 0xe2, 0xe8, 0x4e, 0xf5, 0x60, 0xcd,
	0x8e, 0x0f, 0xf6, 0x23, 0x2e, 0x33, 0x2e, 0x6d, 0x2e, 0xb2, 0xc2, 0xc7, 0x45, 0xb6, 0x74, 0xb5,
	0xbf, 0x00, 0x78, 0xbf, 0x7f, 0x6d, 0x74, 0xa2, 0x88, 0x4f, 0x27, 0xaa, 0x43, 0x15, 0x61, 0xa9,
	0x44, 0x18, 0xde, 0x96, 0x6c, 0x3c, 0xa1, 0x42, 0x62, 0x60, 0x34, 0xcc, 0x96, 0x5f, 0x95, 0xe8,
	0x21, 0xdc, 0x51, 0x89, 0xa0, 0x32, 0xe1, 0x69, 0x8c, 0xeb, 0x06, 0x30, 0x77, 0xfd, 0xb5, 0x80,
	0x1c, 0x08, 0x73, 0x2a, 0x32, 0x26, 0x25, 0xe3, 0x13, 0xbc, 0x65, 0x00, 0x73, 0xef, 0xf9, 0x23,
	0x6b, 0x83, 0xc6, 0xaa, 0x06, 0x7a, 0x82, 0xe7, 0x5c, 0x92, 0x34, 0xb8, 0xcc, 0xa9, 0xbf, 0xd1,
	0xd4, 0xfe, 0x03, 0xe0, 0x76, 0xf5, 0x88, 0xf6, 0x60, 0x9d, 0xc5, 0x18, 0x18, 0xc0, 0xdc, 0xf2,
	0xeb, 0x2c, 0x46, 0x4f, 0xa0, 0x56, 0x7d, 0x16, 0x92, 0x38, 0x16, 0x54, 0xca, 0x12, 0xa2, 0xe5,
	0xdf, 0xad, 0x74, 0x67, 0x29, 0xa3, 0x07, 0x70, 0x27, 0x22, 0x69, 0x1a, 0x26, 0x44, 0x26, 0xb8,
	0x51, 0x7a, 0xb6, 0x0b, 0xe1, 0x1d, 0x91, 0x49, 0xb1, 0x45, 0x4c, 0x73, 0x2e, 0x99, 0xe2, 0xa2,
	0xc4, 0x6c, 0xf9, 0x6b, 0xa1, 0xd8, 0xfe, 0xba, 0xc0, 0xb7, 0xca, 0xd1, 0x55, 0x59, 0xf4, 0x91,
	0x3c, 0x17, 0x7c, 0x46, 0x52, 0x89, 0x9b, 0xe5, 0x65, 0xd6, 0xc2, 0x2b, 0xe7, 0xf7, 0xb7, 0x1f,
	0x9f, 0x1a, 0xaf, 0x61, 0xb3, 0xa0, 0xd6, 0x00, 0x32, 0xe0, 0xc1, 0xbf, 0xb4, 0x4f, 0x57, 0x4c,
	0x1a, 0xc0, 0x00, 0xed, 0x6e, 0x70, 0x68, 0x75, 0x0c, 0x8e, 0xbe, 0x02, 0x78, 0xef, 0x7f, 0x27,
	0x42, 0x87, 0xb0, 0xdd, 0x3f, 0xeb, 0x05, 0xdd, 0x51, 0xf7, 0x6d, 0xe8, 0xf9, 0x43, 0x6f, 0x38,
	0x72, 0x7a, 0x61, 0x70, 0xee, 0xb9, 0xe1, 0xd9, 0x60, 0xe4, 0xb9, 0x27, 0xdd, 0xd3, 0xae, 0xdb,
	0xd1, 0x6a, 0xc8, 0x84, 0x8f, 0x6f, 0xf0, 0x05, 0xbe, 0x33, 0x18, 0x9d, 0xba, 0x7e, 0x38, 0x1c,
	0xf4, 0xce, 0x35, 0x80, 0x8e, 0xe0, 0xe1, 0x0d, 0x4e, 0xf7, 0xfd, 0x89, 0xeb, 0x05, 0xab, 0x06,
	0xad, 0xfe, 0xc6, 0xfb, 0x3e, 0xd7, 0xc1, 0xd5, 0x5c, 0x07, 0xbf, 0xe6, 0x3a, 0xf8, 0xbc, 0xd0,
	0x6b, 0x57, 0x0b, 0xbd, 0xf6, 0x73, 0xa1, 0xd7, 0x3e, 0xbc, 0x1c, 0x33, 0x95, 0x4c, 0x2f, 0xac,
	0x88, 0x67, 0x76, 0x87, 0xd0, 0x59, 0x9f, 0xa9, 0x44, 0x90, 0x89, 0xbd, 0x0c, 0xdd, 0xb3, 0x8c,
	0xc7, 0xd3, 0x94, 0x4a, 0xfb, 0xa3, 0xbd, 0xca, 0xaa, 0xba, 0xcc, 0xa9, 0xbc, 0x68, 0x96, 0x19,
	0x7c, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x84, 0xb5, 0x6f, 0xc1, 0xc4, 0x02, 0x00, 0x00,
}

func (m *MultisigAccountDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultisigAccountDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultisigAccountDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x20
	}
	if m.Threshold != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approvals[iNdEx])
			copy(dAtA[i:], m.Approvals[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.Approvals[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Deposit != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintState(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CallHash) > 0 {
		i -= len(m.CallHash)
		copy(dAtA[i:], m.CallHash)
		i = encodeVarintState(dAtA, i, uint64(len(m.CallHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MultisigAddress) > 0 {
		i -= len(m.MultisigAddress)
		copy(dAtA[i:], m.MultisigAddress)
		i = encodeVarintState(dAtA, i, uint64(len(m.MultisigAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultisigAccountDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovState(uint64(l))
		}
	}
	if m.Threshold != 0 {
		n += 1 + sovState(uint64(m.Threshold))
	}
	if m.Permission != 0 {
		n += 1 + sovState(uint64(m.Permission))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovState(uint64(m.Id))
	}
	l = len(m.MultisigAddress)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.CallHash)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Deposit != 0 {
		n += 1 + sovState(uint64(m.Deposit))
	}
	if len(m.Approvals) > 0 {
		for _, b := range m.Approvals {
			l = len(b)
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultisigAccountDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultisigAccountDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultisigAccountDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= MultisigProposalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisigAddress = append(m.MultisigAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.MultisigAddress == nil {
				m.MultisigAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallHash = append(m.CallHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CallHash == nil {
				m.CallHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = append(m.Depositor[:0], dAtA[iNdEx:postIndex]...)
			if m.Depositor == nil {
				m.Depositor = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, make([]byte, postIndex-iNdEx))
			copy(m.Approvals[len(m.Approvals)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
