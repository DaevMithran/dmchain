// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package multisigv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type ProposalTable interface {
	Insert(ctx context.Context, proposal *Proposal) error
	InsertReturningId(ctx context.Context, proposal *Proposal) (uint64, error)
	LastInsertedSequence(ctx context.Context) (uint64, error)
	Update(ctx context.Context, proposal *Proposal) error
	Save(ctx context.Context, proposal *Proposal) error
	Delete(ctx context.Context, proposal *Proposal) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Proposal, error)
	HasByMultisigAddressCallHash(ctx context.Context, multisig_address []byte, call_hash []byte) (found bool, err error)
	// GetByMultisigAddressCallHash returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByMultisigAddressCallHash(ctx context.Context, multisig_address []byte, call_hash []byte) (*Proposal, error)
	List(ctx context.Context, prefixKey ProposalIndexKey, opts ...ormlist.Option) (ProposalIterator, error)
	ListRange(ctx context.Context, from, to ProposalIndexKey, opts ...ormlist.Option) (ProposalIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProposalIndexKey) error
	DeleteRange(ctx context.Context, from, to ProposalIndexKey) error

	doNotImplement()
}

type ProposalIterator struct {
	ormtable.Iterator
}

func (i ProposalIterator) Value() (*Proposal, error) {
	var proposal Proposal
	err := i.UnmarshalMessage(&proposal)
	return &proposal, err
}

type ProposalIndexKey interface {
	id() uint32
	values() []interface{}
	proposalIndexKey()
}

// primary key starting index..
type ProposalPrimaryKey = ProposalIdIndexKey

type ProposalIdIndexKey struct {
	vs []interface{}
}

func (x ProposalIdIndexKey) id() uint32            { return 0 }
func (x ProposalIdIndexKey) values() []interface{} { return x.vs }
func (x ProposalIdIndexKey) proposalIndexKey()     {}

func (this ProposalIdIndexKey) WithId(id uint64) ProposalIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type ProposalMultisigAddressCallHashIndexKey struct {
	vs []interface{}
}

func (x ProposalMultisigAddressCallHashIndexKey) id() uint32            { return 1 }
func (x ProposalMultisigAddressCallHashIndexKey) values() []interface{} { return x.vs }
func (x ProposalMultisigAddressCallHashIndexKey) proposalIndexKey()     {}

func (this ProposalMultisigAddressCallHashIndexKey) WithMultisigAddress(multisig_address []byte) ProposalMultisigAddressCallHashIndexKey {
	this.vs = []interface{}{multisig_address}
	return this
}

func (this ProposalMultisigAddressCallHashIndexKey) WithMultisigAddressCallHash(multisig_address []byte, call_hash []byte) ProposalMultisigAddressCallHashIndexKey {
	this.vs = []interface{}{multisig_address, call_hash}
	return this
}

type ProposalDepositorIndexKey struct {
	vs []interface{}
}

func (x ProposalDepositorIndexKey) id() uint32            { return 2 }
func (x ProposalDepositorIndexKey) values() []interface{} { return x.vs }
func (x ProposalDepositorIndexKey) proposalIndexKey()     {}

func (this ProposalDepositorIndexKey) WithDepositor(depositor []byte) ProposalDepositorIndexKey {
	this.vs = []interface{}{depositor}
	return this
}

type proposalTable struct {
	table ormtable.AutoIncrementTable
}

func (this proposalTable) Insert(ctx context.Context, proposal *Proposal) error {
	return this.table.Insert(ctx, proposal)
}

func (this proposalTable) Update(ctx context.Context, proposal *Proposal) error {
	return this.table.Update(ctx, proposal)
}

func (this proposalTable) Save(ctx context.Context, proposal *Proposal) error {
	return this.table.Save(ctx, proposal)
}

func (this proposalTable) Delete(ctx context.Context, proposal *Proposal) error {
	return this.table.Delete(ctx, proposal)
}

func (this proposalTable) InsertReturningId(ctx context.Context, proposal *Proposal) (uint64, error) {
	return this.table.InsertReturningPKey(ctx, proposal)
}

func (this proposalTable) LastInsertedSequence(ctx context.Context) (uint64, error) {
	return this.table.LastInsertedSequence(ctx)
}

func (this proposalTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this proposalTable) Get(ctx context.Context, id uint64) (*Proposal, error) {
	var proposal Proposal
	found, err := this.table.PrimaryKey().Get(ctx, &proposal, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &proposal, nil
}

func (this proposalTable) HasByMultisigAddressCallHash(ctx context.Context, multisig_address []byte, call_hash []byte) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		multisig_address,
		call_hash,
	)
}

func (this proposalTable) GetByMultisigAddressCallHash(ctx context.Context, multisig_address []byte, call_hash []byte) (*Proposal, error) {
	var proposal Proposal
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &proposal,
		multisig_address,
		call_hash,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &proposal, nil
}

func (this proposalTable) List(ctx context.Context, prefixKey ProposalIndexKey, opts ...ormlist.Option) (ProposalIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProposalIterator{it}, err
}

func (this proposalTable) ListRange(ctx context.Context, from, to ProposalIndexKey, opts ...ormlist.Option) (ProposalIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProposalIterator{it}, err
}

func (this proposalTable) DeleteBy(ctx context.Context, prefixKey ProposalIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this proposalTable) DeleteRange(ctx context.Context, from, to ProposalIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this proposalTable) doNotImplement() {}

var _ ProposalTable = proposalTable{}

func NewProposalTable(db ormtable.Schema) (ProposalTable, error) {
	table := db.GetTable(&Proposal{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Proposal{}).ProtoReflect().Descriptor().FullName()))
	}
	return proposalTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	ProposalTable() ProposalTable

	doNotImplement()
}

type stateStore struct {
	proposal ProposalTable
}

func (x stateStore) ProposalTable() ProposalTable {
	return x.proposal
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	proposalTable, err := NewProposalTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		proposalTable,
	}, nil
}
