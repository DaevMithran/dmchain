// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: multisig/v1/tx.proto

package multisigv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                       = "/multisig.v1.Msg/UpdateParams"
	Msg_CreateMultisigAccount_FullMethodName              = "/multisig.v1.Msg/CreateMultisigAccount"
	Msg_AddMultisigSigner_FullMethodName                  = "/multisig.v1.Msg/AddMultisigSigner"
	Msg_CleanupMultisigSigner_FullMethodName              = "/multisig.v1.Msg/CleanupMultisigSigner"
	Msg_SetThreshold_FullMethodName                       = "/multisig.v1.Msg/SetThreshold"
	Msg_InitializeMultisigProposal_FullMethodName         = "/multisig.v1.Msg/InitializeMultisigProposal"
	Msg_ApproveMultisigProposal_FullMethodName            = "/multisig.v1.Msg/ApproveMultisigProposal"
	Msg_ApproveAndDispatchMultisigProposal_FullMethodName = "/multisig.v1.Msg/ApproveAndDispatchMultisigProposal"
	Msg_CancelMultisigProposal_FullMethodName             = "/multisig.v1.Msg/CancelMultisigProposal"
	Msg_CleanupMultisigProposal_FullMethodName            = "/multisig.v1.Msg/CleanupMultisigProposal"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the parameters.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// Multisig account
	CreateMultisigAccount(ctx context.Context, in *MsgCreateMultisigAccountParams, opts ...grpc.CallOption) (*MsgCreateMultisigAccountResponse, error)
	AddMultisigSigner(ctx context.Context, in *MsgAddMultisigSignerParams, opts ...grpc.CallOption) (*MsgAddMultisigSignerResponse, error)
	CleanupMultisigSigner(ctx context.Context, in *MsgCleanupMultisigAccountParams, opts ...grpc.CallOption) (*MsgCleanupMultisigAccountResponse, error)
	SetThreshold(ctx context.Context, in *MsgSetMultisigThresholdParams, opts ...grpc.CallOption) (*MsgSetMultisigThresholdResponse, error)
	InitializeMultisigProposal(ctx context.Context, in *MsgInitializeMultisigProposalParams, opts ...grpc.CallOption) (*MsgInitializeMultisigResponse, error)
	ApproveMultisigProposal(ctx context.Context, in *MsgApproveMultisigProposalParams, opts ...grpc.CallOption) (*MsgApproveMultisigProposalResponse, error)
	ApproveAndDispatchMultisigProposal(ctx context.Context, in *MsgApproveAndDispatchMultisigProposalParams, opts ...grpc.CallOption) (*MsgApproveAndDispatchMultisigProposalResponse, error)
	CancelMultisigProposal(ctx context.Context, in *MsgCancelMultisigProposalParams, opts ...grpc.CallOption) (*MsgCancelMultisigProposalResponse, error)
	CleanupMultisigProposal(ctx context.Context, in *MsgCleanupMultisigProposalParams, opts ...grpc.CallOption) (*MsgCleanupMultisigProposalResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMultisigAccount(ctx context.Context, in *MsgCreateMultisigAccountParams, opts ...grpc.CallOption) (*MsgCreateMultisigAccountResponse, error) {
	out := new(MsgCreateMultisigAccountResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMultisigAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddMultisigSigner(ctx context.Context, in *MsgAddMultisigSignerParams, opts ...grpc.CallOption) (*MsgAddMultisigSignerResponse, error) {
	out := new(MsgAddMultisigSignerResponse)
	err := c.cc.Invoke(ctx, Msg_AddMultisigSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CleanupMultisigSigner(ctx context.Context, in *MsgCleanupMultisigAccountParams, opts ...grpc.CallOption) (*MsgCleanupMultisigAccountResponse, error) {
	out := new(MsgCleanupMultisigAccountResponse)
	err := c.cc.Invoke(ctx, Msg_CleanupMultisigSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetThreshold(ctx context.Context, in *MsgSetMultisigThresholdParams, opts ...grpc.CallOption) (*MsgSetMultisigThresholdResponse, error) {
	out := new(MsgSetMultisigThresholdResponse)
	err := c.cc.Invoke(ctx, Msg_SetThreshold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitializeMultisigProposal(ctx context.Context, in *MsgInitializeMultisigProposalParams, opts ...grpc.CallOption) (*MsgInitializeMultisigResponse, error) {
	out := new(MsgInitializeMultisigResponse)
	err := c.cc.Invoke(ctx, Msg_InitializeMultisigProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveMultisigProposal(ctx context.Context, in *MsgApproveMultisigProposalParams, opts ...grpc.CallOption) (*MsgApproveMultisigProposalResponse, error) {
	out := new(MsgApproveMultisigProposalResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveMultisigProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveAndDispatchMultisigProposal(ctx context.Context, in *MsgApproveAndDispatchMultisigProposalParams, opts ...grpc.CallOption) (*MsgApproveAndDispatchMultisigProposalResponse, error) {
	out := new(MsgApproveAndDispatchMultisigProposalResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveAndDispatchMultisigProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelMultisigProposal(ctx context.Context, in *MsgCancelMultisigProposalParams, opts ...grpc.CallOption) (*MsgCancelMultisigProposalResponse, error) {
	out := new(MsgCancelMultisigProposalResponse)
	err := c.cc.Invoke(ctx, Msg_CancelMultisigProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CleanupMultisigProposal(ctx context.Context, in *MsgCleanupMultisigProposalParams, opts ...grpc.CallOption) (*MsgCleanupMultisigProposalResponse, error) {
	out := new(MsgCleanupMultisigProposalResponse)
	err := c.cc.Invoke(ctx, Msg_CleanupMultisigProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the parameters.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// Multisig account
	CreateMultisigAccount(context.Context, *MsgCreateMultisigAccountParams) (*MsgCreateMultisigAccountResponse, error)
	AddMultisigSigner(context.Context, *MsgAddMultisigSignerParams) (*MsgAddMultisigSignerResponse, error)
	CleanupMultisigSigner(context.Context, *MsgCleanupMultisigAccountParams) (*MsgCleanupMultisigAccountResponse, error)
	SetThreshold(context.Context, *MsgSetMultisigThresholdParams) (*MsgSetMultisigThresholdResponse, error)
	InitializeMultisigProposal(context.Context, *MsgInitializeMultisigProposalParams) (*MsgInitializeMultisigResponse, error)
	ApproveMultisigProposal(context.Context, *MsgApproveMultisigProposalParams) (*MsgApproveMultisigProposalResponse, error)
	ApproveAndDispatchMultisigProposal(context.Context, *MsgApproveAndDispatchMultisigProposalParams) (*MsgApproveAndDispatchMultisigProposalResponse, error)
	CancelMultisigProposal(context.Context, *MsgCancelMultisigProposalParams) (*MsgCancelMultisigProposalResponse, error)
	CleanupMultisigProposal(context.Context, *MsgCleanupMultisigProposalParams) (*MsgCleanupMultisigProposalResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateMultisigAccount(context.Context, *MsgCreateMultisigAccountParams) (*MsgCreateMultisigAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultisigAccount not implemented")
}
func (UnimplementedMsgServer) AddMultisigSigner(context.Context, *MsgAddMultisigSignerParams) (*MsgAddMultisigSignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultisigSigner not implemented")
}
func (UnimplementedMsgServer) CleanupMultisigSigner(context.Context, *MsgCleanupMultisigAccountParams) (*MsgCleanupMultisigAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupMultisigSigner not implemented")
}
func (UnimplementedMsgServer) SetThreshold(context.Context, *MsgSetMultisigThresholdParams) (*MsgSetMultisigThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThreshold not implemented")
}
func (UnimplementedMsgServer) InitializeMultisigProposal(context.Context, *MsgInitializeMultisigProposalParams) (*MsgInitializeMultisigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeMultisigProposal not implemented")
}
func (UnimplementedMsgServer) ApproveMultisigProposal(context.Context, *MsgApproveMultisigProposalParams) (*MsgApproveMultisigProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveMultisigProposal not implemented")
}
func (UnimplementedMsgServer) ApproveAndDispatchMultisigProposal(context.Context, *MsgApproveAndDispatchMultisigProposalParams) (*MsgApproveAndDispatchMultisigProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAndDispatchMultisigProposal not implemented")
}
func (UnimplementedMsgServer) CancelMultisigProposal(context.Context, *MsgCancelMultisigProposalParams) (*MsgCancelMultisigProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMultisigProposal not implemented")
}
func (UnimplementedMsgServer) CleanupMultisigProposal(context.Context, *MsgCleanupMultisigProposalParams) (*MsgCleanupMultisigProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupMultisigProposal not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMultisigAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMultisigAccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMultisigAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMultisigAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMultisigAccount(ctx, req.(*MsgCreateMultisigAccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddMultisigSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMultisigSignerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMultisigSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddMultisigSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMultisigSigner(ctx, req.(*MsgAddMultisigSignerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CleanupMultisigSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCleanupMultisigAccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CleanupMultisigSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CleanupMultisigSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CleanupMultisigSigner(ctx, req.(*MsgCleanupMultisigAccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMultisigThresholdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetThreshold(ctx, req.(*MsgSetMultisigThresholdParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitializeMultisigProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitializeMultisigProposalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitializeMultisigProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitializeMultisigProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitializeMultisigProposal(ctx, req.(*MsgInitializeMultisigProposalParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveMultisigProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveMultisigProposalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveMultisigProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveMultisigProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveMultisigProposal(ctx, req.(*MsgApproveMultisigProposalParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveAndDispatchMultisigProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveAndDispatchMultisigProposalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveAndDispatchMultisigProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveAndDispatchMultisigProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveAndDispatchMultisigProposal(ctx, req.(*MsgApproveAndDispatchMultisigProposalParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelMultisigProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelMultisigProposalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelMultisigProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelMultisigProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelMultisigProposal(ctx, req.(*MsgCancelMultisigProposalParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CleanupMultisigProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCleanupMultisigProposalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CleanupMultisigProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CleanupMultisigProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CleanupMultisigProposal(ctx, req.(*MsgCleanupMultisigProposalParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multisig.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateMultisigAccount",
			Handler:    _Msg_CreateMultisigAccount_Handler,
		},
		{
			MethodName: "AddMultisigSigner",
			Handler:    _Msg_AddMultisigSigner_Handler,
		},
		{
			MethodName: "CleanupMultisigSigner",
			Handler:    _Msg_CleanupMultisigSigner_Handler,
		},
		{
			MethodName: "SetThreshold",
			Handler:    _Msg_SetThreshold_Handler,
		},
		{
			MethodName: "InitializeMultisigProposal",
			Handler:    _Msg_InitializeMultisigProposal_Handler,
		},
		{
			MethodName: "ApproveMultisigProposal",
			Handler:    _Msg_ApproveMultisigProposal_Handler,
		},
		{
			MethodName: "ApproveAndDispatchMultisigProposal",
			Handler:    _Msg_ApproveAndDispatchMultisigProposal_Handler,
		},
		{
			MethodName: "CancelMultisigProposal",
			Handler:    _Msg_CancelMultisigProposal_Handler,
		},
		{
			MethodName: "CleanupMultisigProposal",
			Handler:    _Msg_CleanupMultisigProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multisig/v1/tx.proto",
}
